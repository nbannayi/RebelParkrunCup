@page "/add-runners"
@inject HttpClient Http
@using RebelParkrunCup.Shared

<PageTitle>Rebel parkrun Cup Manager - Add Runners</PageTitle>

<h3>ADD RUNNERS</h3>
<p>Use this screen to add runners to the system, these will then immediately be reflected in the VIEW RUNNERS screen.</p>

<EditForm Model="@newRunner" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="firstName">First Name:</label>
        <input type="Text" class="form-control" id="firstName" @bind="newRunner.FirstName" @ref="firstNameInput" style="max-width: 300px; width: 80%;"/>
    </div>    
    <div>
        <label for="lastName">Last Name:</label>
        <input type="Text" class="form-control" id="lastName" @bind="newRunner.LastName" style="max-width: 300px; width: 100%;"/>    
    </div>
    
    <p>
    <div>
        <label for="baselineTime">Baseline Time (mm:ss):</label>
        <input type="Text" class="form-control" id="baselineName" @bind="BaselineTimeString" style="max-width: 300px; width: 100%;"/>        
    </div>
    </p>
    
    <p><button type="submit">Save</button></p>
</EditForm>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <p>@resultMessage</p>
}

@code {
    private Runner newRunner = new Runner();
    private string BaselineTimeString = "";  // Stores "mm:ss" input as a string
    private string resultMessage = "";
    // Create a reference for the first text box (First Name)
    private ElementReference firstNameInput;
    
    private async Task HandleSubmit()
    {                    
        // Check a first and last name entered.
        if (string.IsNullOrWhiteSpace(newRunner.FirstName) || string.IsNullOrWhiteSpace(newRunner.LastName))
        {
            resultMessage = "A first and last name must be supplied for a new runner.";
            await firstNameInput.FocusAsync();
            return;
        }

        // Enforce no duplicates.
        var runners = await Http.GetFromJsonAsync<List<Runner>>("api/runners") ?? new();
        if (runners.Any(r => r.FirstName == newRunner.FirstName && r.LastName == newRunner.LastName))
        {
            resultMessage = "Runner with this name already exists.";            
            await firstNameInput.FocusAsync();
            return;
        }

        // Remaining validation for baseline time vv
        if (!string.IsNullOrWhiteSpace(BaselineTimeString))
        {
            var parts = BaselineTimeString.Split(':');
            if (parts.Length == 2 && int.TryParse(parts[0], out int mins) && int.TryParse(parts[1], out int secs))
            {
                if (mins < 15 || mins > 59 || secs < 0 || secs > 59)
                {
                    resultMessage = "Invalid time entered, must be between 15:00 and 59:59.";
                    await firstNameInput.FocusAsync();
                    return;
                }

                newRunner.BaselineTimeMins = mins;
                newRunner.BaselineTimeSecs = secs;

                // Send the new runner to the API
                var response = await Http.PostAsJsonAsync("api/runners", newRunner);
                
                if (response.IsSuccessStatusCode)
                {
                    resultMessage = "Runner successfully added.";
                    newRunner = new Runner();  // Reset form
                    BaselineTimeString = "";  // Reset time field
                    await firstNameInput.FocusAsync();
                    return;
                }
                else
                {
                    resultMessage = "Failed to save runner.";                    
                    await firstNameInput.FocusAsync();
                    return;
                }
            }
            else
            {
                resultMessage = "Invalid time format. Please enter in mm:ss format.";                
                await firstNameInput.FocusAsync();
                return;
            }
        }
        else
        {
            resultMessage = "A baseline time must be supplied.";                
            await firstNameInput.FocusAsync();
            return;         
        }
    }
}