@page "/ties"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RebelParkrunCup.Shared
@using System.Text.Json

<PageTitle>Rebel parkrun Cup Manager - Tournaments</PageTitle>

<h3>TIES: @activeTournament.Name</h3>

<p>Use this screen to add, view and update parkrun Cup ties between competitors.</p>

<EditForm Model="newTie" OnValidSubmit="SaveTie">

    <!-- Competitor 1 -->
    <label><b>Add</b></label>
    <InputSelect @bind-Value="newTie.Competitor1Id">
        <option value="">Select competitor1</option>
        @foreach (var competitor in competitors)
        {
            <option value="@competitor.Id">@competitor.RunnerFirstName @competitor.RunnerLastName</option>            
        }
    </InputSelect>

    <!-- Competitor 2 -->
    <label<b>vs.</b></label>
    <InputSelect @bind-Value="newTie.Competitor2Id">
        <option value="">Select competitor2</option>
        @foreach (var competitor in competitors)
        {
            <option value="@competitor.Id">@competitor.RunnerFirstName @competitor.RunnerLastName</option>
        }
    </InputSelect>

    <!-- Location -->
    <label><b>at</b></label>
    <InputSelect @bind-Value="newTie.LocationId">
        <option value="">Select location</option>
        @foreach (var location in locations)
        {
            <option value="@location.Id">@location.Name</option>
        }
    </InputSelect>

    <!-- Location -->
    <label><b>in round</b></label>
    <InputSelect @bind-Value="newTie.Round">
        <option value="">Select round</option>
        @for (var n = 1; n <= 7; n++)
        {
            <option>@n</option>
        }
    </InputSelect>

    <!-- Date -->
    <label><b>on</b></label>
    <InputDate @bind-Value="newTie.Date" />
    
    <label>
        <b>TBC</b>
        <InputCheckbox @bind-Value="IsChecked"/> 
    </label> 

    <!-- Submit Button -->
    <button type="submit">Add tie</button>
</EditForm>

@if (message is not null)
{
    @message
}
<p />

<b>Round view </b>
<InputSelect @bind-Value="@roundView">
    <option value="0">All rounds</option>    
    @for (var n = 1; n <= 7; n++)
    {
        <option>@n</option>
    }
</InputSelect>

<div class="table-container" style="max-height: calc(100vh - 295px)" overflow-x = "auto">
    <table class="styled-table">
        <thead>
            <tr>
                <th @onclick="@(() => SortTable("Competitor1FullName"))">Competitor1 
                    @if(sortColumn == "Competitor1FullName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Competitor1Time"))">Time1
                    @if(sortColumn == "Competitor1Time") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor1Delta"))">Delta1
                    @if(sortColumn == "Competitor1Delta") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor2FullName"))">Competitor2
                    @if(sortColumn == "Competitor2FullName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Competitor2Time"))">Time2
                    @if(sortColumn == "Competitor2Time") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor2Delta"))">Delta2
                    @if(sortColumn == "Competitor2Delta") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Location"))">Location 
                    @if(sortColumn == "Location") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Date"))">Date 
                    @if(sortColumn == "Date") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Round"))">Round 
                    @if(sortColumn == "Round") { <span>@(ascending ? "↑" : "↓")</span> }</th>
            <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tie in ties.Where(t => roundView == 0 || t.Round == roundView))
            {
                <tr class="@(tie == selectedTie ? "table-primary" : "")"
                    @onclick="() => SelectTie(tie)">
                    
                    @if (tie.Id == editingTie?.Id)
                    {
                        <!-- Editable Row -->
                        <td>@tie.Competitor1FullName</td>
                        <td>@tie.Competitor1Time</td>
                        <td>@tie.Competitor1Delta</td>
                        <td>@tie.Competitor2FullName</td>
                        <td>@tie.Competitor2Time</td>
                        <td>@tie.Competitor2Delta</td>
                        <td>
                            <select @bind="editingTie.LocationId" class="form-control" text-height=25px>                                
                                @foreach (var location in locations)
                                {
                                    <option value="@location.Id">@location.Name</option>
                                }
                            </select>
                        </td>
                        <td><InputDate @bind-Value="editingTie.Date" class="form-control" text-height=25px/></td>
                  
                        <td>@tie.Round</td>
                        <td>
                            <button class="btn btn-success" @onclick="UpdateTie">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>                        
                    }
                    else
                    {   
                        <!-- Normal Row -->
                        <td style="background-color:@(tie.Competitor1Win ? "lightgreen" : "lightcoral")">
                            @tie.Competitor1FullName
                        </td>
                        <td>
                            <i>@tie.Competitor1Time</i>
                        </td>
                        <td style="color:@(tie.Competitor1Delta >= 0 ? "black" : "red")">
                            <b>@tie.Competitor1Delta</b>
                        </td>
                        <td style="background-color:@(tie.Competitor1Win ? "lightcoral" : "lightgreen")">
                            @tie.Competitor2FullName
                        </td>
                        <td>
                            <i>@tie.Competitor2Time</i>
                        </td>
                        <td style="color:@(tie.Competitor2Delta >= 0 ? "black" : "red")">
                            <b>@tie.Competitor2Delta</b>
                        </td>
                        <td>@tie.Location</td>
                        <td>@tie.Date.ToString("dd/MM/yyyy")</td>
                        <td>@tie.Round</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(tie.Id)">Delete</button>
                            <button class="btn btn-primary text-white" @onclick="() => EditTie(tie)">Edit</button>
                        </td>
                    }
                </tr>                   
            }
        </tbody>        
    </table>
</div>

@{
    var filteredTies = ties.Where(t => roundView == 0 || t.Round == roundView).Count();
    var totalTies = ties.Count();
}
<p><b>Total ties:</b> @filteredTies of @totalTies</p>

@code {
    private bool isChecked = false;
    private TieDto? selectedTie;
    private TieDto? editingTie;
    private int roundView = 0;
    private Tie newTie = new();
    private List<CompetitorDto> competitors = new();
    private List<Location> locations = new();
    private string? message;

    private List<TournamentDto> tournaments = new();

    private TournamentDto activeTournament = new();

    private List<TieDto> ties = new(); 

    protected override async Task OnInitializedAsync()
    {
        await LoadTournaments();

        // Find the active tournament
        activeTournament = tournaments.FirstOrDefault(t => t.Active) ?? new TournamentDto();

        // Load Competitors, Locations and ties from API.
        competitors = (await Http.GetFromJsonAsync<List<CompetitorDto>>($"api/competitors?tournamentId={activeTournament.Id}") ?? new List<CompetitorDto>()).OrderBy(c => c.RunnerFirstName).ToList();
        locations = (await Http.GetFromJsonAsync<List<Location>>("api/locations") ?? new()).OrderBy(l => l.Name).ToList();
        ties = await Http.GetFromJsonAsync<List<TieDto>>($"api/ties?tournamentId={activeTournament.Id}") ?? new List<TieDto>();   

        // Default the new tie to the coming Saturday.
        newTie.Date = DateTime.Now.AddDays(DayOfWeek.Saturday - DateTime.Now.DayOfWeek);
    }

    private async Task LoadTournaments()
    {
        // Fetch tournaments from API
        tournaments = await Http.GetFromJsonAsync<List<TournamentDto>>("api/tournaments") ?? new List<TournamentDto>();        
        Console.WriteLine($"Fetched {tournaments?.Count} tournaments"); 
    }

    private async Task ConfirmDelete(int tieId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "window.confirm", 
            new object[] { "Are you sure you want to delete this tie?" });
        
        if (confirmed)
        {            
            await DeleteTie(tieId);            
        }
    }

    private void CancelEdit()
    {        
        editingTie = null; // Exit edit mode
        StateHasChanged();
    }

    private void EditTie(TieDto tie)
    {        
        editingTie = new TieDto
        {
            Id = tie.Id,
            Competitor1Id = tie.Competitor1Id,
            Competitor2Id = tie.Competitor2Id,
            Round = tie.Round,            
            LocationId = tie.LocationId,
            Date = tie.Date
        };

    }

    private async Task DeleteTie(int tieId)
    {
        if (tieId == 0) return;

        var response = await Http.DeleteAsync($"api/ties/{tieId}");

        if (response.IsSuccessStatusCode)
        {
            ties.RemoveAll(t => t.Id == tieId); // Remove from UI
        }
    }

    private async Task UpdateTie()
    {
        if (editingTie == null) return;
    
        var tieToUpdate = ties.FirstOrDefault(t => t.Id == editingTie.Id);
        if (tieToUpdate != null)
        {
            if (editingTie.Date.DayOfWeek != DayOfWeek.Saturday && editingTie.Date != new DateTime(1, 1, 1))
            {
                message = "Tie date must be a Saturday.";
                return;
            }   

            if (editingTie.LocationId == 0)
            {
                message = "parkrun must be supplied.";
                return;
            }   

            var location = locations.FirstOrDefault(l => l.Id == editingTie.LocationId);
            if (location != null)
            {
                tieToUpdate.Location = location.Name;
            }
            else
            {
                message = "Location not found.";
                return;
            }
            tieToUpdate.LocationId = editingTie.LocationId;
            tieToUpdate.Date = editingTie.Date;            
        }
                            
        await Http.PutAsJsonAsync($"api/ties/{editingTie.Id}", tieToUpdate);

        editingTie = null; // Exit edit mode
    }

    private void SelectTie(TieDto tie)
    {
        selectedTie = tie;
    }

    private async Task SaveTie(EditContext editContext)
    {
        if (newTie.Competitor1Id == 0 || newTie.Competitor2Id == 0 || newTie.Round == 0 || newTie.LocationId == 0)
        {
            message = "Both competitors, round and location must be selected (use TBC if location not yet confirmed).";
            return;
        }

        if (newTie.Date.DayOfWeek != DayOfWeek.Saturday && newTie.Date != new DateTime(1, 1, 1))
        {
            message = "Tie date must be a Saturday.";
            return;
        }   

        if (newTie.Competitor1Id == newTie.Competitor2Id)
        {
            message = "Competitors must be different.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/ties", newTie);
        if (response.IsSuccessStatusCode)
        {
            message = "Tie saved successfully.";
            newTie = new(); // Reset form
            ties = await Http.GetFromJsonAsync<List<TieDto>>($"api/ties?tournamentId={activeTournament.Id}") ?? new List<TieDto>();   
            StateHasChanged(); // Force UI update
        }
        else
        {
            message = "Error saving tie.";
        }
    }
    private bool IsChecked
    {
        get => isChecked;
        set
        {
            isChecked = value;
            UpdateDate();
        }
    }

    private void UpdateDate()
    {
        Console.WriteLine($"UpdateDate: {isChecked}");
        
        if (isChecked)
            newTie.Date = new DateTime(1, 1, 1); // Some default value
        else
            newTie.Date = DateTime.Now.AddDays(DayOfWeek.Saturday - DateTime.Now.DayOfWeek); // Next Saturday

        StateHasChanged();
    }
    private string sortColumn = "Competitor1FullName";
    private bool ascending = true;

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        ties = ascending
            ? ties.OrderBy(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList()
            : ties.OrderByDescending(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList();
    }
}