@page "/ties"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RebelParkrunCup.Shared
@using System.Text.Json

<PageTitle>Rebel parkrun Cup Manager - Ties</PageTitle>

<h3>TIES: @activeTournament.Name</h3>

<p>Use this screen to add, view and update parkrun Cup ties between competitors.</p>

<EditForm Model="newTie" OnValidSubmit="SaveTie">

    <!-- Competitor 1 -->
    <label><b>Add</b></label>
    <InputSelect @bind-Value="newTie.Competitor1Id">
        <option value="">Select competitor1</option>
        @foreach (var competitor in competitors)
        {
            <option value="@competitor.Id">@competitor.RunnerFirstName @competitor.RunnerLastName</option>            
        }
    </InputSelect>

    <!-- Competitor 2 -->
    <label<b>vs.</b></label>
    <InputSelect @bind-Value="newTie.Competitor2Id">
        <option value="">Select competitor2</option>
        @foreach (var competitor in competitors)
        {
            <option value="@competitor.Id">@competitor.RunnerFirstName @competitor.RunnerLastName</option>
        }
    </InputSelect>

    <!-- Location -->
    <label><b>at</b></label>
    <InputSelect @bind-Value="newTie.LocationId">
        <option value="">Select location</option>
        @foreach (var location in locations)
        {
            <option value="@location.Id">@location.Name</option>
        }
    </InputSelect>

    <!-- Location -->
    <label><b>in round</b></label>
    <InputSelect @bind-Value="newTie.Round">
        <option value="">Select round</option>
        @for (var n = 1; n <= 7; n++)
        {
            <option>@n</option>
        }
    </InputSelect>

    <!-- Date -->
    <label><b>on</b></label>
    <InputDate @bind-Value="newTie.Date" />
    
    <label>
        <b>TBC</b>
        <InputCheckbox @bind-Value="IsChecked"/> 
    </label> 

    <!-- Submit Button -->
    <button type="submit">Add tie</button>    
</EditForm>

<button @onclick="FetchParkrunResults" @attributes="@(canUpdateResults ? new Dictionary<string, object> { ["disabled"] = "disabled" } : null)">Get Results</button>

@if (message is not null)
{
    @message
}
<p />

<b>Round view </b>
<InputSelect @bind-Value="@roundView">
    <option value="0">All rounds</option>    
    @for (var n = 1; n <= 7; n++)
    {
        <option>@n</option>
    }
</InputSelect>

<div class="table-container" style="max-height: calc(100vh - 295px)" overflow-x = "auto">
    <table class="styled-table">
        <thead>
            <tr>
                <th @onclick="@(() => SortTable("Competitor1FullName"))">Competitor1 
                    @if(sortColumn == "Competitor1FullName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Competitor1Time"))">Time1
                    @if(sortColumn == "Competitor1Time") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor1Delta"))">Delta1
                    @if(sortColumn == "Competitor1DeltaTime") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor2FullName"))">Competitor2
                    @if(sortColumn == "Competitor2FullName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Competitor2Time"))">Time2
                    @if(sortColumn == "Competitor2Time") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor2Delta"))">Delta2
                    @if(sortColumn == "Competitor2DeltaTime") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Location"))">Location 
                    @if(sortColumn == "Location") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Date"))">Date 
                    @if(sortColumn == "Date") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Round"))">Round 
                    @if(sortColumn == "Round") { <span>@(ascending ? "↑" : "↓")</span> }</th>
            <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tie in ties.Where(t => roundView == 0 || t.Round == roundView))
            {
                <tr key="@tie.Id" class="@(tie == selectedTie ? "table-primary" : "")"
                    @onclick="() => SelectTie(tie)">
                    
                    @if (tie.Id == editingTie?.Id)
                    {
                        <!-- Editable Row -->
                        <td>@tie.Competitor1FullName</td>
                        <td>@tie.Competitor1Time</td>
                        <td>@tie.Competitor1DeltaTime</td>
                        <td>@tie.Competitor2FullName</td>
                        <td>@tie.Competitor2Time</td>
                        <td>@tie.Competitor2DeltaTime</td>
                        <td>
                            <select @bind="editingTie.LocationId" 
                                style="width: 180px; min-width: 120px; max-width: 180px; height: 30px; font-size: 14px;">                                
                                @foreach (var location in locations)
                                {
                                    <option value="@location.Id">@location.Name</option>
                                }
                                @tie.Location
                            </select>
                        </td>
                        <td>
                            <InputDate @bind-Value="editingTie.Date" style="height: 24px; font-size: 14px; padding: 2px; border: 1px solid #ccc;" />
                        </td>

                        <td>@tie.Round</td>
                        <td>
                            <button class="btn btn-success" style="height: 24px; font-size: 14px; padding: 2px; border: 1px solid #ccc;" @onclick="UpdateTie">Save</button>
                            <button class="btn btn-secondary" style="height: 24px; font-size: 14px; padding: 2px; border: 1px solid #ccc;" @onclick="CancelEdit">Cancel</button>
                        </td>                        
                    }
                    else
                    {   
                        <!-- Normal Row -->
                        <td style="background-color:@(tie.Competitor1Win ? "lightgreen" : "lightcoral")">
                            @tie.Competitor1FullName
                        </td>
                        <td>
                            @tie.Competitor1Time
                        </td>
                        <td style="color:@(tie.Competitor1Delta >= 0 ? "black" : "red")">
                            @tie.Competitor1DeltaTime
                        </td>
                        <td style="background-color:@(tie.Competitor1Win ? "lightcoral" : "lightgreen")">
                            @tie.Competitor2FullName
                        </td>
                        <td>
                            @tie.Competitor2Time
                        </td>
                        <td style="color:@(tie.Competitor2Delta >= 0 ? "black" : "red")">
                            @tie.Competitor2DeltaTime
                        </td>
                        <td>@tie.Location</td>
                        <td>@tie.Date.ToString("dd/MM/yyyy")</td>
                        <td>@tie.Round</td>
                        <td>
                            <button class="btn btn-danger" style="height: 24px; font-size: 14px; padding: 2px; border: 1px solid #ccc;" @onclick="() => ConfirmDelete(tie.Id)">Delete</button>
                            <button class="btn btn-primary text-white" style="height: 24px; font-size: 14px; padding: 2px; border: 1px solid #ccc;" @onclick="() => EditTie(tie)">Edit</button>
                        </td>
                    }
                </tr>                   
            }
        </tbody>        
    </table>
</div>

@{
    var filteredTies = ties.Where(t => roundView == 0 || t.Round == roundView).Count();
    var totalTies = ties.Count();
}
<p><b>Total ties:</b> @filteredTies of @totalTies</p>

@code {
    private bool isChecked = false;
    private TieDto? selectedTie;
    private TieDto? editingTie;
    private int roundView = 0;
    private Tie newTie = new();
    private List<CompetitorDto> competitors = new();
    private List<Location> locations = new();
    private string? message;

    private List<TournamentDto> tournaments = new();

    private TournamentDto activeTournament = new();

    private List<TieDto> ties = new(); 

    private bool canUpdateResults = false;

    private Dictionary<(string RunnerId, string Event, string RunDate), string> resultsDict 
        = new Dictionary<(string, string, string), string>();

    private async Task FetchParkrunResultsApi(List<TieDto> updateableTies)
    {
        resultsDict.Clear();
        List<string> runnerIds = new(); 
        
        // Get list of all relevant runners.
        foreach (var tie in updateableTies)
        {
            var competitor1 = competitors.FirstOrDefault(c => c.Id == tie.Competitor1Id);
            var competitor2 = competitors.FirstOrDefault(c => c.Id == tie.Competitor2Id);
            if (competitor1 != null && competitor2 != null)
            {
                var runner1ParkrunId = competitor1.RunnerParkrunId;
                var runner2ParkrunId = competitor2.RunnerParkrunId;
                runnerIds.Add(runner1ParkrunId);
                runnerIds.Add(runner2ParkrunId);
            }
         
        }   
        runnerIds = runnerIds.Distinct().ToList();

        // Fetch Parkrun results for all relevant runners and put in a dictionary.
        try
        {
            var response = 
                await Http.GetFromJsonAsync<List<ParkrunResult>>(
                $"api/ParkrunProxy?runnerId={string.Join("&runnerId=", runnerIds)}");

            if (response != null)
            {
                resultsDict = response
                    .SelectMany(r => r.Results)
                    .ToDictionary(
                        r => (r.RunnerId, r.Event, r.RunDate),  // Key
                        r => r.Time                             // Value
                    );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            message = " Error fetching data.";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTournaments();

        // Find the active tournament
        activeTournament = tournaments.FirstOrDefault(t => t.Active) ?? new TournamentDto();

        // Load Competitors, Locations and ties from API.
        competitors = (await Http.GetFromJsonAsync<List<CompetitorDto>>($"api/competitors?tournamentId={activeTournament.Id}") ?? new List<CompetitorDto>()).OrderBy(c => c.RunnerFirstName).ToList();
        locations = (await Http.GetFromJsonAsync<List<Location>>("api/locations") ?? new()).OrderBy(l => l.Name).ToList();
        ties = await Http.GetFromJsonAsync<List<TieDto>>($"api/ties?tournamentId={activeTournament.Id}") ?? new List<TieDto>();   

        // Default the new tie to the coming Saturday.
        newTie.Date = DateTime.Now.AddDays(DayOfWeek.Saturday - DateTime.Now.DayOfWeek);

        // Determine button enablement for update.
        canUpdateResults = !GetUpdateableResults().Any();
    }

    private async Task LoadTournaments()
    {
        // Fetch tournaments from API
        tournaments = await Http.GetFromJsonAsync<List<TournamentDto>>("api/tournaments") ?? new List<TournamentDto>();        
        Console.WriteLine($"Fetched {tournaments?.Count} tournaments"); 
    }

    private List<TieDto> GetUpdateableResults()
    {
        // Determine whether there are ties to update.
        return ties.Where(t => !t.Competitor1FullName.ToLower().Contains("bye") &&
                                           !t.Competitor2FullName.ToLower().Contains("bye") &&
                                           !(t.Location?.ToLower().Contains("bye") ?? false) &&
                                           !(t.Location?.ToLower().Contains("tbc") ?? false) &&
                                           (t.Date < DateTime.Now && DateTime.Now.Hour >= 10) &&
                                           (t.Competitor1ResultMins == 0 || t.Competitor2ResultMins == 0)).ToList();
    }

    private async Task ConfirmDelete(int tieId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "window.confirm", 
            new object[] { "Are you sure you want to delete this tie?" });
        
        if (confirmed)
        {            
            await DeleteTie(tieId);            
        }
    }

    private void CancelEdit()
    {        
        editingTie = null; // Exit edit mode
        //StateHasChanged();
    }

    private void EditTie(TieDto tie)
    {        
        Console.WriteLine($"Editing Tie - LocationId: {tie.LocationId}");  // Debugging
        editingTie = new TieDto
        {
            Id = tie.Id,
            Competitor1Id = tie.Competitor1Id,
            Competitor2Id = tie.Competitor2Id,
            Round = tie.Round,
            Location = tie.Location,             
            LocationId = tie.LocationId,
            Date = tie.Date,
            Competitor1ResultMins = tie.Competitor1ResultMins,
            Competitor1ResultSecs = tie.Competitor1ResultSecs,  
            Competitor1Delta = tie.Competitor1Delta,
            Competitor2ResultMins = tie.Competitor2ResultMins,
            Competitor2ResultSecs = tie.Competitor2ResultSecs,  
            Competitor2Delta = tie.Competitor2Delta                  
        };

        StateHasChanged();
    }

    private async Task DeleteTie(int tieId)
    {
        if (tieId == 0) return;

        var response = await Http.DeleteAsync($"api/ties/{tieId}");

        if (response.IsSuccessStatusCode)
        {
            ties.RemoveAll(t => t.Id == tieId); // Remove from UI
        }
    }

    private async Task UpdateTie()
    {
        if (editingTie == null) return;
    
        var tieToUpdate = ties.FirstOrDefault(t => t.Id == editingTie.Id);
        if (tieToUpdate != null)
        {
            if (editingTie.Date.DayOfWeek != DayOfWeek.Saturday && editingTie.Date != new DateTime(1, 1, 1))
            {
                message = " Tie date must be a Saturday.";
                return;
            }   

            if (editingTie.LocationId == 0)
            {
                message = " parkrun must be supplied.";
                return;
            }   

            var location = locations.FirstOrDefault(l => l.Id == editingTie.LocationId);
            if (location != null)
            {
                tieToUpdate.Location = location.Name;
            }
            else
            {
                message = " Location not found.";
                return;
            }

            tieToUpdate.LocationId = editingTie.LocationId;
            tieToUpdate.Date = editingTie.Date;   
            tieToUpdate.Competitor1ResultMins = editingTie.Competitor1ResultMins;  
            tieToUpdate.Competitor1ResultSecs = editingTie.Competitor1ResultSecs;  
            tieToUpdate.Competitor1Delta = editingTie.Competitor1Delta;  
            tieToUpdate.Competitor2ResultMins = editingTie.Competitor2ResultMins;  
            tieToUpdate.Competitor2ResultSecs = editingTie.Competitor2ResultSecs;  
            tieToUpdate.Competitor2Delta = editingTie.Competitor2Delta;
        }
        
        await Http.PutAsJsonAsync($"api/ties/{editingTie.Id}", tieToUpdate);                        

        editingTie = null; // Exit edit mode
        StateHasChanged();
    }

    private void SelectTie(TieDto tie)
    {
        selectedTie = tie;
    }

    private async Task SaveTie(EditContext editContext)
    {
        if (newTie.Competitor1Id == 0 || newTie.Competitor2Id == 0 || newTie.Round == 0 || newTie.LocationId == 0)
        {
            message = " Both competitors, round and location must be selected (use TBC if location not yet confirmed).";
            return;
        }

        if (newTie.Date.DayOfWeek != DayOfWeek.Saturday && newTie.Date != new DateTime(1, 1, 1))
        {
            message = " Tie date must be a Saturday.";
            return;
        }   

        if (newTie.Competitor1Id == newTie.Competitor2Id)
        {
            message = " Competitors must be different.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/ties", newTie);
        if (response.IsSuccessStatusCode)
        {
            message = " Tie saved successfully.";
            newTie = new(); // Reset form
            ties = await Http.GetFromJsonAsync<List<TieDto>>($"api/ties?tournamentId={activeTournament.Id}") ?? new List<TieDto>();   
            StateHasChanged(); // Force UI update
        }
        else
        {
            message = " Error saving tie.";
        }
    }
    private bool IsChecked
    {
        get => isChecked;
        set
        {
            isChecked = value;
            UpdateDate();
        }
    }

    private void UpdateDate()
    {
        Console.WriteLine($"UpdateDate: {isChecked}");
        
        if (isChecked)
            newTie.Date = new DateTime(1, 1, 1); // Some default value
        else
            newTie.Date = DateTime.Now.AddDays(DayOfWeek.Saturday - DateTime.Now.DayOfWeek); // Next Saturday

        StateHasChanged();
    }
    private string sortColumn = "Competitor1FullName";
    private bool ascending = true;

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        ties = ascending
            ? ties.OrderBy(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList()
            : ties.OrderByDescending(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList();
    }

    private string GetDate(string date)
    {
        return $"{date.Substring(0, 2)}-{date.Substring(3, 2)}-{date.Substring(6, 4)}";    
    }

    private async Task FetchParkrunResults()
    {
        var updateableTies = GetUpdateableResults();
        message = $" Retrieving results for {updateableTies.Count} ties...";

        await FetchParkrunResultsApi(updateableTies);

        foreach (var tie in ties)
        {
            var competitor1 = competitors.FirstOrDefault(c => c.Id == tie.Competitor1Id);
            var competitor2 = competitors.FirstOrDefault(c => c.Id == tie.Competitor2Id);

            if (competitor1 != null && tie.Location != null && resultsDict.TryGetValue((competitor1.RunnerParkrunId, tie.Location, tie.Date.ToString("dd/MM/yyyy")), out var time))
            {
                Console.WriteLine($"Competitor1: {competitor1.RunnerFirstName} {competitor1.RunnerLastName}");  
                Console.WriteLine($"Time: {time}"); 

                var timeTokens = time.Split(':').Select(int.Parse).ToArray();            
                tie.Competitor1ResultMins = timeTokens[0];
                tie.Competitor1ResultSecs = timeTokens[1];
                tie.Competitor1Delta = 60*competitor1.BaselineTimeMins + competitor1.BaselineTimeSecs - 
                                       60*tie.Competitor1ResultMins - tie.Competitor1ResultSecs;
            }

            if (competitor2 != null && tie.Location != null && 
                resultsDict.TryGetValue((competitor2.RunnerParkrunId, tie.Location, tie.Date.ToString("dd/MM/yyyy")), out time))
            {
                Console.WriteLine($"Competitor2: {competitor2.RunnerFirstName} {competitor2.RunnerLastName}");  
                Console.WriteLine($"Time: {time}"); 

                var timeTokens = time.Split(':').Select(int.Parse).ToArray();            
                tie.Competitor2ResultMins = timeTokens[0];
                tie.Competitor2ResultSecs = timeTokens[1];
                tie.Competitor2Delta = 60*competitor2.BaselineTimeMins + competitor2.BaselineTimeSecs - 
                                       60*tie.Competitor2ResultMins - tie.Competitor2ResultSecs;
            }

            EditTie(tie);
            await UpdateTie();
        }

        editingTie = null;
        StateHasChanged();
        message = " Results updated.";
    }
}