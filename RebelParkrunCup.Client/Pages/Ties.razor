@page "/ties"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RebelParkrunCup.Shared

<PageTitle>Rebel parkrun Cup Manager - Tournaments</PageTitle>

<h3>TIES: @activeTournament.Name</h3>

<p>Use this screen to add, view and update parkrun Cup ties between competitors.</p>

<EditForm Model="newTie" OnValidSubmit="SaveTie">

    <!-- Competitor 1 -->
    <label><b>New Tie </b></label>
    <InputSelect @bind-Value="newTie.Competitor1Id">
        <option value="">Select competitor1</option>
        @foreach (var competitor in competitors)
        {
            <option value="@competitor.Id">@competitor.RunnerFirstName @competitor.RunnerLastName</option>
        }
    </InputSelect>

    <!-- Competitor 2 -->
    <label<b>vs.</b></label>
    <InputSelect @bind-Value="newTie.Competitor2Id">
        <option value="">Select competitor2</option>
        @foreach (var competitor in competitors)
        {
            <option value="@competitor.Id">@competitor.RunnerFirstName @competitor.RunnerLastName</option>
        }
    </InputSelect>

    <!-- Location -->
    <label><b>at</b></label>
    <InputSelect @bind-Value="newTie.LocationId">
        <option value="">Select location</option>
        @foreach (var location in locations)
        {
            <option value="@location.Id">@location.Name</option>
        }
    </InputSelect>

    <!-- Location -->
    <label><b>in round</b></label>
    <InputSelect @bind-Value="newTie.Round">
        <option value="">Select round</option>
        @for (var n = 1; n <= 10; n++)
        {
            <option>@n</option>
        }
    </InputSelect>

    <!-- Date -->
    <label><b>on</b></label>
    <InputDate @bind-Value="newTie.Date" />

    <!-- Submit Button -->
    <button type="submit">Add tie</button>
</EditForm>
<p />
<div class="table-container" style="max-height: calc(100vh - 270px)">
    <table class="styled-table">
        <thead>
            <tr>
                <th @onclick="@(() => SortTable("Competitor1FullName"))">Competitor1 
                    @if(sortColumn == "Competitor1FullName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Competitor1Time"))">Time1
                    @if(sortColumn == "Competitor1Time") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor1Delta"))">Delta1
                    @if(sortColumn == "Competitor1Delta") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor2FullName"))">Competitor2
                    @if(sortColumn == "Competitor2FullName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Competitor2Time"))">Time2
                    @if(sortColumn == "Competitor2Time") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Competitor2Delta"))">Delta2
                    @if(sortColumn == "Competitor2Delta") { <span>@(ascending ? "↑" : "↓")</span> }</th>                
                <th @onclick="@(() => SortTable("Location"))">Location 
                    @if(sortColumn == "Location") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Date"))">Date 
                    @if(sortColumn == "Date") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("Round"))">Round 
                    @if(sortColumn == "Round") { <span>@(ascending ? "↑" : "↓")</span> }</th>
            <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tie in ties)
            {
                <!-- Normal Row -->
                <tr>
                    <td style="background-color:@(tie.Competitor1Win ? "lightgreen" : "lightcoral")">
                        @tie.Competitor1FullName
                    </td>
                    <td style="background-color:@(tie.Competitor1Win ? "lightgreen" : "lightcoral")">
                        @tie.Competitor1Time
                    </td>
                    <td style="background-color:@(tie.Competitor1Win ? "lightgreen" : "lightcoral")">
                        @tie.Competitor1Delta
                    </td>
                    <td style="background-color:@(tie.Competitor1Win ? "lightcoral" : "lightgreen")">
                        @tie.Competitor2FullName
                    </td>
                    <td style="background-color:@(tie.Competitor1Win ? "lightcoral" : "lightgreen")">
                        @tie.Competitor2Time
                    </td>
                    <td style="background-color:@(tie.Competitor1Win ? "lightcoral" : "lightgreen")">
                        @tie.Competitor2Delta
                    </td>
                    <td>@tie.Location</td>
                    <td>@tie.Date.ToString("dd/MM/yyyy")</td>
                    <td>@tie.Round</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(tie.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>        
    </table>
</div>

<p><b>Total ties: </b>@ties.Count</p>

@if (message is not null)
{
    <p>@message</p>
}

@code {
    private Tie newTie = new();
    private List<CompetitorDto> competitors = new();
    private List<Location> locations = new();
    private string? message;

    private List<TournamentDto> tournaments = new();

    private TournamentDto activeTournament = new();

    private List<TieDto> ties = new(); 

    protected override async Task OnInitializedAsync()
    {
        await LoadTournaments();

        // Find the active tournament
        activeTournament = tournaments.FirstOrDefault(t => t.Active) ?? new TournamentDto();

        // Load Competitors, Locations and ties from API.
        competitors = await Http.GetFromJsonAsync<List<CompetitorDto>>($"api/competitors?tournamentId={activeTournament.Id}") ?? new List<CompetitorDto>();
        locations = await Http.GetFromJsonAsync<List<Location>>("api/locations") ?? new();
        ties = await Http.GetFromJsonAsync<List<TieDto>>($"api/ties?tournamentId={activeTournament.Id}") ?? new List<TieDto>();   

        // Default the new tie to the coming Saturday.
        newTie.Date = DateTime.Now.AddDays(DayOfWeek.Saturday - DateTime.Now.DayOfWeek);
    }

    private async Task LoadTournaments()
    {
        // Fetch tournaments from API
        tournaments = await Http.GetFromJsonAsync<List<TournamentDto>>("api/tournaments") ?? new List<TournamentDto>();        
        Console.WriteLine($"Fetched {tournaments?.Count} tournaments"); 
    }

    private async Task ConfirmDelete(int tieId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "window.confirm", 
            new object[] { "Are you sure you want to delete this tie?" });
        
        if (confirmed)
        {
            // TODO.
            //await DeleteTie(tieId);            
        }
    }

    private async Task SaveTie(EditContext editContext)
    {
        var response = await Http.PostAsJsonAsync("api/ties", newTie);
        if (response.IsSuccessStatusCode)
        {
            message = "Tie saved successfully!";
            newTie = new Tie(); // Reset form
        }
        else
        {
            message = "Error saving tie.";
        }
    }

    private string sortColumn = "Competitor1FullName";
    private bool ascending = true;

    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        ties = ascending
            ? ties.OrderBy(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList()
            : ties.OrderByDescending(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList();
    }
}