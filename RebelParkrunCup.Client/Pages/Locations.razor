@page "/locations"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RebelParkrunCup.Shared

<PageTitle>Rebel parkrun Cup Manager - Locations</PageTitle>

<h3>LOCATIONS</h3>

<p>Use this screen to add, view and update parkrun Cup locations, these can then be used in ties.</p>

<EditForm Model="@newLocation" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div style="display: flex; align-items: center; gap: 10px;">
        <!-- Name Input: Takes More Space -->
        <div style="flex-grow: 2;">
            <label for="name"><b>Name:</b></label>
            <input type="text" class="form-control" id="name" @ref="nameInput" @bind="newLocation.Name" style="width: 100%;" />
        </div>

    </div>
    <p/><button type="submit" style="display: inline-block; width: auto;">Save</button>    
</EditForm>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <p>@resultMessage</p>
}

<p/>

<div class="table-container" style="max-height: calc(100vh - 270px)">
    <table class="styled-table">
        <thead>
            <tr>
                <th @onclick="@(() => SortTable("Name"))">Name 
                    @if(sortColumn == "Name") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var location in locations)
            {
                <tr class="@(location == selectedLocation ? "table-primary" : "")"
                    @onclick="() => SelectLocation(location)">
                    
                    @if (location.Id == editingLocation?.Id)
                    {
                        <!-- Editable Row -->
                        <td><input @bind="editingLocation.Name" class="form-control" /></td>
                        <td>
                            <button class="btn btn-success" @onclick="SaveLocation">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <!-- Normal Row -->
                        <td>@location.Name</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(location.Id)">Delete</button>
                            <button class="btn btn-primary text-white" @onclick="() => EditLocation(location)">Rename</button>
                        </td>
                    }
                </tr>
            }
        </tbody>        
    </table>
</div>

<p><b>Total parkrun locations:</b> @locations.Count</p>

@if (locations.Count == 0)
{
    <p>No parkruns found.</p>
}

@code {
    private List<Location> locations = new();
    private Location? selectedLocation;
    private Location? editingLocation;
    private string origName;
    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
    }

    private async Task LoadLocations()
    {
        locations = await Http.GetFromJsonAsync<List<Location>>("api/locations") ?? new();
        
        // By default order by name vv
        locations = locations.OrderBy(l => l.Name).ToList();
    }
    private void SelectLocation(Location location)
    {
        selectedLocation = location;
    }
    
    private void EditLocation(Location location)
    {
        origName = location.Name;

        editingLocation = new Location
        {
            Id = location.Id,
            Name = location.Name
        };
    }   

    private async Task SaveLocation()
    {
        if (editingLocation == null) return;

        var locationToUpdate = locations.FirstOrDefault(l => l.Id == editingLocation.Id);                
        if (locationToUpdate != null)
        {
            locationToUpdate.Name = editingLocation.Name;
            if (locationToUpdate.Name == "")
            {
                await JSRuntime.InvokeVoidAsync("alert", "A name must be supplied for a parkrun location.");
                locationToUpdate.Name = origName;
                return;
            }
        }
        
        await Http.PutAsJsonAsync($"api/locations/{editingLocation.Id}", locationToUpdate);

        editingLocation = null; // Exit edit mode
    }

    private void CancelEdit()
    {
        editingLocation = null; // Exit edit mode
    }
    private async Task DeleteLocation(int locationId)
    {
        if (locationId == 0) return;

        var response = await Http.DeleteAsync($"api/locations/{locationId}");

        if (response.IsSuccessStatusCode)
        {
            locations.RemoveAll(l => l.Id == locationId); // Remove from UI
        }
    }

    private async Task ConfirmDelete(int locationId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "window.confirm", 
            new object[] { "Are you sure you want to delete this parkrun location?" });
        
        if (confirmed)
        {
            await DeleteLocation(locationId);
        }
    }

    private string sortColumn = "Name";
    private bool ascending = true;
    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        locations = ascending
            ? locations.OrderBy(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList()
            : locations.OrderByDescending(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList();
    }

    // Form submission logic for new location.
    private Location newLocation = new Location();
    private string resultMessage = "";
    // Create a reference for the first text box (Name)
    private ElementReference nameInput;
    
    private async Task HandleSubmit()
    {                    
        // Check a first and last name entered.
        if (string.IsNullOrWhiteSpace(newLocation.Name))
        {
            resultMessage = "A name must be supplied for a new parkrun location.";
            await nameInput.FocusAsync();
            return;
        }

        // Enforce no duplicates.
        var locations = await Http.GetFromJsonAsync<List<Location>>("api/locations") ?? new();
        if (locations.Any(l => l.Name == newLocation.Name))
        {
            resultMessage = "parkrun with this name already exists.";            
            await nameInput.FocusAsync();
            return;
        }

        // Send the new tournament to the API
        var response = await Http.PostAsJsonAsync("api/locations", newLocation);
                
        if (response.IsSuccessStatusCode)
        {
            resultMessage = "parkrun successfully added.";
            newLocation = new Location();  // Reset form.            
            await nameInput.FocusAsync();            
            locations.Add(newLocation);
            await LoadLocations();        
            StateHasChanged(); // Force UI update
            return;
        }
        else
        {
            resultMessage = "Failed to save parkrun.";                    
            await nameInput.FocusAsync();
            return;
        }
    }
}