@page "/runners"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RebelParkrunCup.Shared

<PageTitle>Rebel parkrun Cup Manager - Runners</PageTitle>

<h3>RUNNERS</h3>

<p>Use this screen to add, view, edit and remove runners' names and parkrun id's.</p>

<EditForm Model="@newRunner" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="firstName"><b>First Name:</b></label>
    <input type="Text" class="form-control" id="firstName" @bind="newRunner.FirstName" @ref="firstNameInput" style="display: inline-block; width: auto; margin-right: 10px;"/>
    <label for="lastName"><b>Last Name:</b></label>
    <input type="Text" class="form-control" id="lastName" @bind="newRunner.LastName" style="display: inline-block; width: auto; margin-right: 10px;"/>    
    <label for="parkrunId"><b>parkrun Id:</b></label>
    <input type="Text" class="form-control" id="parkrunId" @bind="newRunner.ParkrunID" style="display: inline-block; width: auto; margin-right: 10px;"/>    
    <button type="submit" style="display: inline-block; width: auto;">Save</button>    
</EditForm>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <p>@resultMessage</p>
}

<p/>

<div class="table-container" style="max-height: calc(100vh - 270px)">
    <table class="styled-table">
        <thead>
            <tr>
                <th @onclick="@(() => SortTable("FirstName"))">First Name 
                    @if(sortColumn == "FirstName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("LastName"))">Last Name 
                    @if(sortColumn == "LastName") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th @onclick="@(() => SortTable("ParkrunID"))">parkrun Id 
                    @if(sortColumn == "ParkrunID") { <span>@(ascending ? "↑" : "↓")</span> }</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var runner in runners)
            {
                <tr class="@(runner == selectedRunner ? "table-primary" : "")"
                    @onclick="() => SelectRunner(runner)">
                    
                    @if (runner.Id == editingRunner?.Id)
                    {
                        <!-- Editable Row -->
                        <td><input @bind="editingRunner.FirstName" class="form-control" /></td>
                        <td><input @bind="editingRunner.LastName" class="form-control" /></td>
                        <td><input @bind="editingRunner.ParkrunID" class="form-control" /></td>
                        <td>
                            <button class="btn btn-success" @onclick="SaveRunner">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <!-- Normal Row -->
                        <td>@runner.FirstName</td>
                        <td>@runner.LastName</td>
                        <td>@runner.ParkrunID</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(runner.Id)">Delete</button>
                            <button class="btn btn-primary text-white" @onclick="() => EditRunner(runner)">Edit</button>
                        </td>
                    }
                </tr>
            }
        </tbody>        
    </table>
</div>

<p><b>Total runners:</b> @runners.Count</p>

@if (runners.Count == 0)
{
    <p>No runners found.</p>
}

@code {
    private List<Runner> runners = new();
    private Runner? selectedRunner;
    private Runner? editingRunner;
    private Runner? origRunner;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadRunners();
    }

    private async Task LoadRunners()
    {
        runners = await Http.GetFromJsonAsync<List<Runner>>("api/runners") ?? new();
        
        // By default order by first name vv
        runners = runners.OrderBy(r => r.FirstName).ToList();
    }
    private void SelectRunner(Runner runner)
    {
        selectedRunner = runner;
    }

    private void EditRunner(Runner runner)
    {
        origRunner = runners.FirstOrDefault(r => r.Id == runner.Id);

        editingRunner = new Runner
        {
            Id = runner.Id,
            FirstName = runner.FirstName,
            LastName = runner.LastName,
            ParkrunID = runner.ParkrunID
        };
    }

    private async Task SaveRunner()
    {
        if (editingRunner == null) return;

        var runnerToUpdate = runners.FirstOrDefault(r => r.Id == editingRunner.Id);
        if (runnerToUpdate != null)
        {
            if (editingRunner.FirstName == "" || editingRunner.LastName == "" || editingRunner.ParkrunID == "")
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    "A first and last name as well as a parkrun id must be supplied.");

                return;            
            }
            else
            {
                runnerToUpdate.FirstName = editingRunner.FirstName;
                runnerToUpdate.LastName = editingRunner.LastName;
                runnerToUpdate.ParkrunID = editingRunner.ParkrunID; 
            }
        }
                    
        await Http.PutAsJsonAsync($"api/runners/{editingRunner.Id}", runnerToUpdate);

        editingRunner = null; // Exit edit mode
    }

    private void CancelEdit()
    {        
        editingRunner = null; // Exit edit mode
    }

    private async Task DeleteRunner(int runnerId)
    {
        if (runnerId == 0) return;

        var response = await Http.DeleteAsync($"api/runners/{runnerId}");

        if (response.IsSuccessStatusCode)
        {
            runners.RemoveAll(r => r.Id == runnerId); // Remove from UI
        }
    }

    private async Task ConfirmDelete(int runnerId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "window.confirm", 
            new object[] { "Are you sure you want to delete this runner?" });
        
        if (confirmed)
        {
            await DeleteRunner(runnerId);
        }
    }

    private string sortColumn = "FirstName";
    private bool ascending = true;
    private void SortTable(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        runners = ascending
            ? runners.OrderBy(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList()
            : runners.OrderByDescending(p => p.GetType().GetProperty(sortColumn)?.GetValue(p, null)).ToList();
    }

    // Form submission logic for new runner.
    private Runner newRunner = new Runner();
    private string resultMessage = "";
    // Create a reference for the first text box (First Name)
    private ElementReference firstNameInput;
    
    private async Task HandleSubmit()
    {                    
        // Check a first and last name entered.
        if (string.IsNullOrWhiteSpace(newRunner.FirstName) || string.IsNullOrWhiteSpace(newRunner.LastName) ||
            string.IsNullOrWhiteSpace(newRunner.ParkrunID))
        {
            resultMessage = "A first and last name as well as a parkrun id must be supplied for a new runner.";
            await firstNameInput.FocusAsync();
            return;
        }   

        // Enforce no duplicates.
        var runners = await Http.GetFromJsonAsync<List<Runner>>("api/runners") ?? new();
        if (runners.Any(r => r.FirstName == newRunner.FirstName && r.LastName == newRunner.LastName))
        {
            resultMessage = "Runner with this name already exists.";            
            await firstNameInput.FocusAsync();
            return;
        }

        // Send the new runner to the API
        var response = await Http.PostAsJsonAsync("api/runners", newRunner);
                
        if (response.IsSuccessStatusCode)
        {
            resultMessage = "Runner successfully added.";
            newRunner = new Runner();  // Reset form.            
            await firstNameInput.FocusAsync();            
            runners.Add(newRunner);
            await LoadRunners();        
            StateHasChanged(); // Force UI update
            return;
        }
        else
        {
            resultMessage = "Failed to save runner.";                    
            await firstNameInput.FocusAsync();
            return;
        }
    }
}