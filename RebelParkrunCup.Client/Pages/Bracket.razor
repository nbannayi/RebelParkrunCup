@page "/bracket"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RebelParkrunCup.Shared

<PageTitle>Rebel parkrun Cup Manager - Bracket</PageTitle>

<h3>BRACKET: @activeTournament.Name</h3>
<p>This screen shows a pictoral view of all ties played in the active tournament so far. Tip: hover mouse over times to see deltas.</p>

@code {    
    private TournamentDto activeTournament = new TournamentDto();
    private List<TieDto> ties = new(); 
    private List<List<TieDto>> tieRounds = new(); // List of lists of ties for each round.
    
    protected override async Task OnInitializedAsync()
    {
        var tournaments = await Http.GetFromJsonAsync<List<TournamentDto>>("api/tournaments") ?? new List<TournamentDto>();   
        activeTournament = tournaments.FirstOrDefault(t => t.Active) ?? new TournamentDto();
        ties = await Http.GetFromJsonAsync<List<TieDto>>($"api/ties?tournamentId={activeTournament.Id}") ?? new List<TieDto>(); 
        if (ties.Count > 0) tieRounds = GetTieRounds();
    }
    
    private int GetXPosition(int round) => 25 + (round-1) * 250; // Space out rounds

    private (int,int) GetLineOffsets(int round)
    {
        int dwLineOffset = 25; 
        int upLineOffset = 25;
        switch (round)
        {
            case 1:
                dwLineOffset = 50; upLineOffset = 15;
                break;
            case 2:
                dwLineOffset = 80; upLineOffset = 60;
                break;
            case 3:
                dwLineOffset = 140; upLineOffset = 150;
                break;
            case 4:
                dwLineOffset = 260; upLineOffset = 330;
                break;
            case 5:
                dwLineOffset = 500; upLineOffset = 695;
                break;
        }
        return (dwLineOffset, upLineOffset);
    }

    private int GetYPosition(int index, int round)
    {
        var step = 0;
        var start = 0;
        switch (round)
        {
            case 1:
                start = 30; step = 75;
                break;
            case 2:
                start = 60; step = 150;
                break;
            case 3:
                start = 120; step = 300;
                break;
            // To review...
            case 4:
                start = 240; step = 600;
                break;
            case 5:
                start = 480; step = 1200;
                break;
            case 6: 
                start = 960; step = 2400;
                break;                  
        }        
        return start + step*index; // Space out matches
    }

    // Get list of ties for each round in render order.
    private List<List<TieDto>> GetTieRounds()
    {        
        int maxRound = ties.Max(t => t.Round);       
        var lastRound = ties.Where(t => t.Round == maxRound).ToList();
        var tieRoundsNew = new List<List<TieDto>>();
        tieRoundsNew.Add(lastRound);
        while (tieRoundsNew.Last().Max(t => t.Round) > 1)
        {            
            var tieRoundNew = tieRoundsNew.Last();            
            var tiePreviousRound = 
                ties.Where(t => t.Round == tieRoundNew.Max(t => t.Round) - 1).
                ToList(); 
            var tiePreviousRoundNew = new List<TieDto>();
            foreach (var tie in tieRoundNew)
            {
                var tiePreviousRound1 = tiePreviousRound.FirstOrDefault(t => 
                    (t.WinningCompetitor == 1 && t.Competitor1Id == tie.Competitor1Id) ||
                    (t.WinningCompetitor == 2 && t.Competitor2Id == tie.Competitor1Id));                
                var tiePreviousRound2 = tiePreviousRound.FirstOrDefault(t => 
                    (t.WinningCompetitor == 1 && t.Competitor1Id == tie.Competitor2Id) ||
                    (t.WinningCompetitor == 2 && t.Competitor2Id == tie.Competitor2Id));    
                if (tiePreviousRound1 != null && tiePreviousRound2 != null)
                {
                    tiePreviousRoundNew.Add(tiePreviousRound1);
                    tiePreviousRoundNew.Add(tiePreviousRound2);
                }
            }
            tieRoundsNew.Add(tiePreviousRoundNew);   
        }
        tieRoundsNew.Reverse();
        foreach (var trn in tieRoundsNew)        
            foreach (var t in trn)            
                Console.WriteLine($"Round {t.Round} - {t.Competitor1FullName} vs {t.Competitor2FullName}");        
        return tieRoundsNew.ToList();                
    }

    private string GetRoundLabel(List<TieDto> tieRound)
    {
        var round = tieRound[0].Round;
        switch (tieRound.Count)
        {
            case 1:
                return "FINAL";
            case 2:
                return "SEMI-FINAL";
            case 4:
                return "QUARTER-FINAL";            
            default:
                return $"ROUND {round}";
        }
    }
}

<!-- SVG for the bracket -->
<div style="width: calc(100vw - 300px); height: calc(100vh - 185px); overflow: auto; border: 1px solid grey; position: relative;">
    <div style="width: 2000px; position: sticky; top: 0; height: 50px; background-color: #F0F0F0; border-bottom: 1px solid grey;">       
        <svg width="2000" height="50">
            @foreach (var tieRound in tieRounds)
            {
                Console.WriteLine($"Tie round: {tieRound.Count}");
                var x1 = 25 + 250 * (tieRound[0].Round - 1);
                var label = GetRoundLabel(tieRound);
                var x2 = 100 + 250 * (tieRound[0].Round - 1);                
                
                // Cosmetic tweaks for final rounds.
                if (label == "QUARTER-FINAL") x2 -= 25;
                if (label == "SEMI-FINAL") x2 -= 10;
                if (label == "FINAL") x2 += 5;
                
                <svg>
                    <rect x="@x1" y="10" width="210" height="30" stroke="grey" fill="lightgreen" stroke-width="black"/>
                    <text x="@x2" y="30" font-weight="bold" font-size="14" fill="black">@label</text>   
                </svg>
            }
        </svg>
    </div>
    <svg id="bracket-svg" width="2000" height="2500">    
        <defs>
            <linearGradient id="gradient1" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style="stop-color:#F0F0F0; stop-opacity:1" />
                <stop offset="100%" style="stop-color:#D3D3D3; stop-opacity:1" />
            </linearGradient>
        </defs>
        @foreach (var tieRound in tieRounds)
        {
            @for (var i = 0; i < tieRound.Count; i++)
            {
                var tie = tieRound[i];
                int x = GetXPosition(tie.Round);
                int y = GetYPosition(i, tie.Round);
                var dwLineOffset = 25;
                var upLineOffset = 25;
                <rect x="@x" y="@y" width="210" height="50" stroke="grey" fill="url(#gradient1)" stroke-width="1"></rect>
                <svg>
                    <text x="@(@x + 10)" y="@(@y + 20)" font-size="14">
                        <title>‚ñ≥ @tie.Competitor1DeltaTime</title>
                        <tspan fill="black" font-weight=@(tie.WinningCompetitor == 1 ? "bold" : "normal")>
                            @tie.Competitor1FullName
                        </tspan>
                        @(tie.WinningCompetitor == 1 ? "üèÜ" : "") 
                        @tie.Competitor1Time
                    </text>
                    <text x="@(@x + 10)" y="@(@y + 40)" font-size="14">                        
                        <title>‚ñ≥ @tie.Competitor2DeltaTime</title>
                        <tspan fill="black" font-weight=@(tie.WinningCompetitor == 2 ? "bold" : "normal")>
                            @tie.Competitor2FullName
                        </tspan>
                        @(tie.WinningCompetitor == 2 ? "üèÜ" : "") 
                        @tie.Competitor2Time
                    </text>     
                    @if (tie.Round < tieRounds.Count)
                    {
                        (dwLineOffset, upLineOffset) = GetLineOffsets(tie.Round);
                        if (i % 2 == 0)                    
                        {
                            <line x1="@(@x+210)" y1="@(@y+25)" x2="@(@x+250)" y2="@(@y+@dwLineOffset)" stroke="gray" stroke-width="1.5"/>   
                        }
                        else
                        {
                            <line x1="@(@x+210)" y1="@(@y+25)" x2="@(@x+250)" y2="@(@y-@upLineOffset)" stroke="gray" stroke-width="1.5"/>   
                        }
                    }                    
                </svg>
            }
        }        
    </svg>
</div>